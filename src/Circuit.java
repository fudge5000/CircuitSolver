import Jama.*;
import java.util.ArrayList;

/**
 * Represents an electric circuit
 * @author Jacob Oakman
 * @version 2018.10.01
 */
public class Circuit
{
    private ArrayList<Node> nodeList;
    private ArrayList<Mesh> meshList;
    
    /**
     * Create a Circuit object
     * @param nodeList list of populated nodes
     */
    public Circuit()
    {
        this.nodeList = new ArrayList<Node>();
        this.meshList = new ArrayList<Mesh>();
    }
    
    public boolean addNode(Node node)
    {
        return this.nodeList.add(node);
    }
    
    public void addNode(int index, Node node)
    {
        this.nodeList.add(index, node);
    }
    
    public Node getNode(int index)
    {
        return this.nodeList.get(index);
    }
    
    /**
     * Gets the node voltages for each node
     * @return an array with voltages for each node
     */
    public double[] getMeshKVLList()
    {
        double[][] matrix = new double[meshList.size()][meshList.size()];
        
        for (int i = 0; i < meshList.size(); i++)
        {
            matrix[i] = meshList.get(i).generateMeshEquasion(meshList.size());
        }
        
        double[] solution = this.solveEquasions(matrix);
        double[] result = new double[solution.length + 1];
        
        for (int i = 0; i < solution.length; i++)
        {
            result[i + 1] = solution[i];
        }
        
        return result;
    }
    
    /**
     * Gets the node voltages for each node
     * @return an array with voltages for each node
     */
    public double[] getNodeKCLList()
    {
        double[][] matrix = new double[nodeList.size()][nodeList.size()];
        
        for (int i = 0; i < nodeList.size(); i++)
        {
            matrix[i] = nodeList.get(i).generateNodeEquasion(nodeList.size());
        }
        
        double[] solution = this.solveEquasions(matrix);
        double[] result = new double[solution.length + 1];
        
        for (int i = 0; i < solution.length; i++)
        {
            result[i + 1] = solution[i];
        }
        
        return result;
    }
    
    /**
     * Uses the arrays generated by the node equations
     * @param equasionList
     * @return array with voltages
     */
    public double[] solveEquasions(double[][] equasionList)
    {
        double[][] coeficients = new double[equasionList.length][equasionList.length - 1];
        double[][] constants = new double[equasionList.length][1];
                
        for (int y = 0; y < equasionList.length; y++)
        {
            for (int x = 1; x < equasionList[y].length; x++)
            {
                coeficients[y][x - 1] = equasionList[y][x];
            }
            constants[y][0] = equasionList[y][0];
        }
        
        Matrix coefMatrix = new Matrix(coeficients);
        Matrix conMatrix = new Matrix(constants);
        
        return coefMatrix.solve(conMatrix).getColumnPackedCopy();
    }
}
